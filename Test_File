### CHARGEMENT DES PACKAGES ###

# Lecture CSV
using CSV

# Plot
using Seaborn




### PARAMETRES DE SIMULATION ET CHARGEMENT DES DONNEES ###

# Parametres de simulation
dk = 1. # en h
horizon = 24.  # en h
nk=length(dk:dk:horizon) # nombre de pas de temps sur l'horizon

# Data
data_tuto = CSV.read("data_tuto.csv")




### CREATION DES STRUCTURES ###

# Power sources (PV & EOL)
struct Source
    pkWc # (kWc) puissance crete
    power # (kW) puissance
end

# Load
struct Load
    pMax # (kW) puissance max
    power # (kW) puissance
end

# Batterie
struct Batterie
    # Parametres
    Erated # (kWh) capacité
    pMaxCh # (kW) puissance max de charge
    pMaxDch # (kW) puissance max de décharge
    ηCh # (0-1) rendement de charge
    ηDch # (0-1) rendement de décharge
    socMin # (0-1) SOC min
    socMax # (0-1) SOC max
    socIni # (0-1) SOC initial
    # Variables
    power # (kW) puissance
    soc # (0-1) SOC
end




### INITIALISATION ###

# PV
pv = Source(60,60. * data_tuto.data_pv)

# EOL
eol = Source(60,60. * data_tuto.data_pv)

# Load_elec
ld_elec = Load(30., 30. * data_tuto.data_ld_E)

## Load_therm
#ld_therm = Load(30., 30. * data_tuto.data_ld_E)

#Fake Load
Fake_load = Load(100., zeros(nk,1))

# Batterie_elec
batt_elec = Batterie(200., 300., 300., 0.8, 0.8, 0.2, 0.8, 0.5, zeros(nk,1), zeros(nk+1,1))
batt_elec.soc[1] = batt_elec.socIni

## Batterie_therm
#batt_therm = Batterie(200., 300., 300., 0.8, 0.8, 0.2, 0.8, 0.5, zeros(nk,1), zeros(nk+1,1))
#batt_therm.soc[1] = batt_therm.socIni





### SIMULATEUR ###


# Trajectoire de controle sur l'horizon (determinée par l'opti)
controlPowerBatt = ;

# Simulation du micro-réseau sur l'horizon
for k=1:nk
    
    # Batterie elec: limitation en puissance et dynamique
    batt_elec.power[k] = max(min(0,controlPowerBatt[k]),-batt_elec.pMaxCh) + min(max(0,controlPowerBatt[k]),batt_elec.pMaxDch);
    batt_elec.soc[k+1] = batt_elec.soc[k] - (min(0,batt.batt_elec[k]) * batt.ηCh + max(0,batt_elec.power[k]) / batt_elec.ηDch) * dk / batt_elec.Erated;

    ## Batterie thermique: limitation en puissance et dynamique
    #batt_therm.power[k] = max(min(0,controlPowerBatt[k]),-batt_therm.pMaxCh) + min(max(0,controlPowerBatt[k]),batt_therm.pMaxDch);
    #batt_therm.soc[k+1] = batt_therm.soc[k] - (min(0,batt.batt_therm[k]) * batt.ηCh + max(0,batt_therm.power[k]) / batt_therm.ηDch) * dk / batt_therm.Erated;

    # Calcul de la puissance "a jeter"
    Fake_load.power[k] = max(0 , ld_elec.power[k] - pv.power[k] - eol.power[k] - batt_elec.power[k] );
    
end
